import { View, Text, Image, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';
import React, { useState, useEffect, useRef } from 'react';
import { Animated } from 'react-native';
import { StoryScreen } from '../../src/components/game/StoryScreen';
import { GameScreen } from '../components/GameScreen';
import stageConfigs from '../config/stageConfig';
import stageService from '@src/services/stageService';
import { StageType, StageProgress } from '../types/progress';
import CBTHomeSection from '@src/components/cbt/CBTHomeSection';
import { MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import authService from '@src/services/authService';
import cbtService from '@src/services/cbtService';
import LoginBonusModal from '@src/components/cbt/LoginBonusModal';
import { LoginBonus } from '../types/cbt';

const IntermediateScreen = () => {
  const router = useRouter();
  const [showStory, setShowStory] = useState(true);
  const [progress, setProgress] = useState<StageProgress | null>(null);
  const [isPaused, setIsPaused] = useState(false);
  const [gameMode, setGameMode] = useState(false); // ゲームモード（trueでゲーム画面のみ表示）
  const [showLoginBonus, setShowLoginBonus] = useState(false);
  const [loginBonusData, setLoginBonusData] = useState<LoginBonus | null>(null);
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    // Load progress
    loadProgress();
    // ログインボーナスをチェック
    checkLoginBonus();

    // Fade in animation
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 1000,
      useNativeDriver: true,
    }).start();
  }, []);

  const loadProgress = async () => {
    try {
      console.log('中級画面: 進捗データ読み込み開始');
      const loadedProgress = await stageService.getProgress(StageType.INTERMEDIATE);
      console.log('中級画面: 進捗データ読み込み完了', loadedProgress);

      if (!loadedProgress) {
        console.error('中級画面: 進捗データが見つかりません');
        return;
      }

      setProgress(loadedProgress);
    } catch (error) {
      console.error('中級画面: 進捗データ読み込みエラー', error);
    }
  };

  const handleStoryComplete = () => {
    setShowStory(false);
  };

  const handleCharacterComplete = async (character: string, isCorrect: boolean, responseTime: number) => {
    try {
      const updatedProgress = await stageService.updateProgress(StageType.INTERMEDIATE, character, isCorrect, responseTime);
      console.log('中級画面: 進捗データ更新完了', updatedProgress);
      setProgress(updatedProgress);
    } catch (error) {
      console.error('中級画面: 進捗データ更新エラー', error);
    }
  };

  const handlePause = () => {
    setIsPaused(true);
  };

  const handleResume = () => {
    setIsPaused(false);
  };

  // ゲームモードとCBTモードを切り替える
  const toggleGameMode = () => {
    setGameMode(!gameMode);
  };

  // ログインボーナスをチェックする関数
  const checkLoginBonus = async () => {
    try {
      const user = authService.getUser();
      if (!user) return;

      // 今日のログインボーナスを確認
      const loginBonus = await cbtService.processLoginBonus(user.id);
      
      // 未受取の報酬があるか確認
      const hasUnclaimedRewards = loginBonus.rewards.some(r => !r.isCollected);
      
      if (hasUnclaimedRewards) {
        setLoginBonusData(loginBonus);
        setShowLoginBonus(true);
      }
    } catch (error) {
      console.error('ログインボーナス確認エラー:', error);
    }
  };

  // ログインボーナスモーダルを閉じる
  const handleLoginBonusClose = () => {
    setShowLoginBonus(false);
  };

  if (!progress) {
    console.log('中級画面: 進捗データ読み込み待機中');
    return (
      <View
        style={{
          flex: 1,
          justifyContent: 'center',
          alignItems: 'center',
          backgroundColor: '#FFFFFF',
        }}>
        <Image
          source={require('@assets/temp/elder-worried.png')}
          style={{
            width: 100,
            height: 100,
            marginBottom: 20,
            opacity: 0.8,
          }}
        />
        <Text
          style={{
            fontFamily: 'font-mplus-bold',
            fontSize: 18,
            color: '#41644A',
            marginBottom: 10,
          }}>
          データを よみこんでいます
        </Text>
        <Text
          style={{
            fontFamily: 'font-mplus',
            fontSize: 14,
            color: '#666',
          }}>
          しばらく おまちください
        </Text>
      </View>
    );
  }

  // Get intermediate stage config
  const config = stageConfigs[StageType.INTERMEDIATE];
  if (!config) {
    console.error('設定が見つかりません: INTERMEDIATE');
    return null;
  }

  if (showStory) {
    return (
      <View style={{ flex: 1, backgroundColor: '#FFFFFF', justifyContent: 'center', alignItems: 'center' }}>
        <StoryScreen
          backgroundImage={config.backgroundImage}
          title='ちゅうきゅうへん'
          text={`みなさん、こんにちは！
ここは ちゅうきゅうの もりです。
むずかしい もじも たくさん でてきますが、
みなさんなら きっと だいじょうぶ！
がんばって れんしゅう しましょう！`}
          buttonText='はじめる'
          onStart={handleStoryComplete}
          fadeAnim={fadeAnim}
          elderImage={require('@assets/temp/elder-worried.png')}
        />
      </View>
    );
  }

  // ゲームモード時はゲーム画面のみ表示
  if (gameMode) {
    return (
      <View style={{ flex: 1, backgroundColor: 'transparent' }}>
        {/* <View
          style={{
            flexDirection: 'row',
            justifyContent: 'space-between',
            alignItems: 'center',
            padding: 16,
            paddingBottom: 8,
          }}>
          <TouchableOpacity
            onPress={toggleGameMode}
            style={{
              flexDirection: 'row',
              alignItems: 'center',
              backgroundColor: '#F0F0F0',
              paddingVertical: 6,
              paddingHorizontal: 12,
              borderRadius: 16,
            }}>
            <MaterialCommunityIcons name='arrow-left' size={18} color='#41644A' />
            <Text
              style={{
                fontFamily: 'Zen-B',
                fontSize: 14,
                color: '#41644A',
                marginLeft: 4,
              }}>
              もどる
            </Text>
          </TouchableOpacity>

          <Text
            style={{
              fontSize: 18,
              fontFamily: 'Zen-B',
              color: '#41644A',
            }}>
            きょうの れんしゅう
          </Text>

          <View style={{ width: 70 }} />
        </View> */}

        {/* ゲーム画面 */}
        <GameScreen config={config} progress={progress} onPause={handlePause} onCharacterComplete={handleCharacterComplete} />
      </View>
    );
  }

  // 通常モード（CBTホーム + ゲームボタン）
  return (
    <SafeAreaView style={{ flex: 1, backgroundColor: '#FFFFFF' }}>
      <ScrollView
        style={{ flex: 1, backgroundColor: '#FFFFFF' }}
        nestedScrollEnabled={true}
        contentContainerStyle={{ flexGrow: 1 }}
        showsVerticalScrollIndicator={true}>
        {/* 認知行動療法セクション */}
        <View style={{ padding: 16 }}>
          <Text
            style={{
              fontSize: 24,
              fontFamily: 'Zen-B',
              color: '#41644A',
              marginBottom: 16,
              textAlign: 'center',
            }}>
            ちゅうきゅう れんしゅう
          </Text>

          {/* CBTホームセクション */}
          <CBTHomeSection />

          {/* 区切り線 */}
          <View
            style={{
              height: 4,
              backgroundColor: '#F0F0F0',
              borderRadius: 2,
              marginVertical: 16,
            }}
          />

          {/* ゲームモードに切り替えるボタン */}
          <TouchableOpacity
            onPress={toggleGameMode}
            style={{
              backgroundColor: '#41644A',
              paddingVertical: 12,
              paddingHorizontal: 24,
              borderRadius: 24,
              alignItems: 'center',
              marginBottom: 20,
            }}>
            <Text
              style={{
                fontFamily: 'Zen-B',
                fontSize: 16,
                color: '#FFFFFF',
              }}>
              きょうの れんしゅうを はじめる
            </Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
      
      {/* ログインボーナスモーダル */}
      <LoginBonusModal visible={showLoginBonus} onClose={handleLoginBonusClose} />
    </SafeAreaView>
  );
};

export default IntermediateScreen;
