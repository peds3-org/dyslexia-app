import React from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  StyleSheet,
  Dimensions,
} from 'react-native';
import { useRouter } from 'expo-router';
import { supabase } from '@src/lib/supabase';
import { LinearGradient } from 'expo-linear-gradient';
import { TestResult, TestLevel } from '@src/types/initialTest';
import { useAppState } from '@src/contexts/AppStateContext';

const { width } = Dimensions.get('window');

interface ResultsScreenProps {
  results: TestResult[];
  testLevel: TestLevel;
  YOON_LIST: string[];
  SEION_LIST: string[];
  DAKUON_LIST: string[];
}

export default function ResultsScreen({ results, testLevel, YOON_LIST, SEION_LIST, DAKUON_LIST }: ResultsScreenProps) {
  const router = useRouter();

  // AIË™çË≠òÁµêÊûú„ÇíËÄÉÊÖÆ„Åó„ÅüÊ≠£Ëß£Êï∞„ÅÆË®àÁÆó
  const correctCount = results.filter((r) => {
    if (r.aiResult && r.aiResult.isCorrect !== undefined) {
      return r.aiResult.isCorrect;
    }
    return r.time <= 2.5;
  }).length;
  const accuracy = (correctCount / results.length) * 100;


  // ÁµêÊûú„ÇíÂàÜÈ°û„Åô„ÇãÈñ¢Êï∞
  const getTimeCategory = (time: number) => {
    // ÊôÇÈñì„Å´Âü∫„Å•„ÅÑ„ÅüË©ï‰æ°
    if (time <= 1.5) {
      // „Å®„Å¶„ÇÇ‰∏äÊâã
      return { 
        message: '„Å®„Å¶„ÇÇ„Åò„Çá„ÅÜ„ÅöÔºÅ', 
        color: '#4CAF50',
        emoji: '‚òÄÔ∏è',
        gradientColors: ['#C8E6C9', '#A5D6A7'] 
      };
    } else if (time <= 2.0) {
      // ‰∏äÊâã
      return { 
        message: '„Åò„Çá„ÅÜ„ÅöÔºÅ', 
        color: '#2196F3',
        emoji: '‚≠ê',
        gradientColors: ['#90CAF9', '#64B5F6']
      };
    } else if (time <= 2.5) {
      // È†ëÂºµ„Å£„Åü
      return { 
        message: '„Åå„Çì„Å∞„Å£„Åü„Å≠', 
        color: '#FF9800',
        emoji: 'üí™',
        gradientColors: ['#FFCC80', '#FFB74D']
      };
    } else {
      // „ÇÇ„ÅÜÂ∞ë„Åó
      return { 
        message: '„ÇÇ„ÅÜ„Åô„Åì„ÅóÔºÅ', 
        color: '#F44336',
        emoji: 'üåà',
        gradientColors: ['#FFCDD2', '#EF9A9A']
      };
    }
  };

  // 10Âïè„Åî„Å®„Å´„Ç∞„É´„Éº„ÉóÂåñ„Åô„Çã
  const groupedResults = results.reduce((acc, result, index) => {
    const groupIndex = Math.floor(index / 10);
    if (!acc[groupIndex]) {
      acc[groupIndex] = [];
    }
    acc[groupIndex].push(result);
    return acc;
  }, [] as TestResult[][]);

  // Êòü„ÇíÊèèÁîª„Åô„ÇãÈñ¢Êï∞
  const renderStars = (correct: number, total: number) => {
    const percentage = (correct / total) * 100;
    const stars = percentage >= 90 ? 3 : percentage >= 70 ? 2 : percentage >= 50 ? 1 : 0;
    
    return (
      <View style={styles.starsContainer}>
        {[1, 2, 3].map((star) => (
          <Text key={star} style={[styles.star, { opacity: star <= stars ? 1 : 0.3 }]}>
            ‚≠ê
          </Text>
        ))}
      </View>
    );
  };

  return (
    <LinearGradient
      colors={['#87CEEB', '#FFE4E1']}
      style={styles.container}
    >
      <SafeAreaView style={styles.safeArea}>
        <ScrollView style={styles.scrollView} showsVerticalScrollIndicator={false}>
          {/* „Éò„ÉÉ„ÉÄ„Éº */}
          <View style={styles.header}>
            <View style={styles.resultCard}>
              <Text style={styles.title}>‚ú® „Å¶„Åô„Å®„Åë„Å£„Åã ‚ú®</Text>
              <Text style={styles.subtitle}>
                {testLevel === 'intermediate' ? '„Å°„ÇÖ„ÅÜ„Åç„ÇÖ„ÅÜ' : '„Åó„Çá„Åç„ÇÖ„ÅÜ'} „É¨„Éô„É´
              </Text>
              
              {/* „Çπ„Ç≥„Ç¢Ë°®Á§∫ */}
              <View style={styles.scoreContainer}>
                <Text style={styles.scoreText}>
                  {correctCount} / {results.length} „Åõ„ÅÑ„Åã„ÅÑÔºÅ
                </Text>
                {renderStars(correctCount, results.length)}
              </View>
              
              {/* Á∑èÂêàË©ï‰æ°„É°„ÉÉ„Çª„Éº„Ç∏ */}
              <Text style={styles.overallMessage}>
                {accuracy >= 90 ? '„Åô„Å∞„Çâ„Åó„ÅÑÔºÅ„Åç„Åø„ÅØ„Å≤„Çâ„Åå„Å™„Éû„Çπ„Çø„Éº„Å†ÔºÅ' :
                 accuracy >= 70 ? '„Çà„Åè„Åß„Åç„Åæ„Åó„ÅüÔºÅ„ÇÇ„ÅÜ„Åô„Åì„Åó„Åß„Éû„Çπ„Çø„Éº„Å†„ÇàÔºÅ' :
                 accuracy >= 50 ? '„Åå„Çì„Å∞„Å£„Åü„Å≠ÔºÅ„Çå„Çì„Åó„ÇÖ„ÅÜ„Çí„Å§„Å•„Åë„Çà„ÅÜÔºÅ' :
                 '„Å†„ÅÑ„Åò„Çá„ÅÜ„Å∂ÔºÅ„ÅÑ„Å£„Åó„Çá„Å´„Åå„Çì„Å∞„Çç„ÅÜÔºÅ'}
              </Text>
            </View>
          </View>

          {/* ÁµêÊûú„É™„Çπ„Éà */}
          <View style={styles.resultsContainer}>
            {results.map((result, index) => {
              const category = getTimeCategory(result.time);
              const isCorrect = result.aiResult?.isCorrect ?? (result.time <= 2.5);
              
              // ÊôÇÈñì„Éô„Éº„Çπ„Åß„ÅÆË©ï‰æ°„ÇíÂÑ™ÂÖà„Åó„ÄÅËÉåÊôØËâ≤„ÇíÊ±∫ÂÆö
              const useTimeBasedColors = result.time <= 2.5;
              const gradientColors = useTimeBasedColors ? category.gradientColors : ['#FFEBEE', '#FFCDD2'];
              
              return (
                <View key={index} style={styles.resultItemWrapper}>
                  <LinearGradient
                    colors={gradientColors}
                    style={styles.resultItem}
                  >
                    {/* ÊñáÂ≠óË°®Á§∫ */}
                    <View style={styles.characterContainer}>
                      <Text style={styles.characterText}>{result.yoon}</Text>
                      <View style={styles.resultIcon}>
                        <Text style={styles.resultIconText}>
                          {isCorrect ? category.emoji : 'üí≠'}
                        </Text>
                      </View>
                    </View>
                    
                    {/* Ë©≥Á¥∞ÊÉÖÂ†± */}
                    <View style={styles.detailsContainer}>
                      <Text style={[styles.messageText, { color: category.color }]}>
                        {category.message}
                      </Text>
                      {result.time > 0 && (
                        <Text style={styles.timeText}>
                          {result.time.toFixed(1)}„Å≥„Çá„ÅÜ
                        </Text>
                      )}
                    </View>
                  </LinearGradient>
                </View>
              );
            })}
          </View>

          {/* Ê¨°„Å∏„Éú„Çø„É≥ */}
          <TouchableOpacity
            onPress={async () => {
              try {
                // ÁèæÂú®„ÅÆ„É¶„Éº„Ç∂„ÉºID„ÇíÂèñÂæó
                const {
                  data: { session },
                } = await supabase.auth.getSession();
                if (!session?.user?.id) {
                  throw new Error('„É¶„Éº„Ç∂„ÉºID„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì');
                }

                // RouteGuard„ÅåËá™ÂãïÁöÑ„Å´ÈÅ©Âàá„Å™ÁîªÈù¢„Å∏ÈÅ∑Áßª„Åô„Çã„Åü„ÇÅ„ÄÅ
                // „Åì„Åì„Åß„ÅØÂçò„Å´„É´„Éº„Éà„Å∏Êàª„Çã
                router.replace('/');
              } catch (error) {
                console.error('ÁîªÈù¢ÈÅ∑Áßª„Ç®„É©„Éº:', error);
                Alert.alert('„Ç®„É©„Éº', '„Å§„Åé„ÅÆ „Åå„ÇÅ„Çì„Å´ „Åô„Åô„ÇÅ„Åæ„Åõ„Çì„Åß„Åó„Åü');
              }
            }}
            style={styles.nextButton}
          >
            <LinearGradient
              colors={['#FFD700', '#FFA500']}
              style={styles.nextButtonGradient}
            >
              <Text style={styles.nextButtonText}>„Å§„Åé„Å∏„Åô„Åô„ÇÄ ‚Üí</Text>
            </LinearGradient>
          </TouchableOpacity>
        </ScrollView>
      </SafeAreaView>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  safeArea: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    padding: 20,
    alignItems: 'center',
  },
  resultCard: {
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderRadius: 20,
    padding: 20,
    width: width - 40,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 5,
  },
  title: {
    fontFamily: 'font-mplus-bold',
    fontSize: 28,
    color: '#333',
    marginBottom: 10,
  },
  subtitle: {
    fontFamily: 'font-mplus',
    fontSize: 18,
    color: '#666',
    marginBottom: 20,
  },
  scoreContainer: {
    alignItems: 'center',
    marginBottom: 15,
  },
  scoreText: {
    fontFamily: 'font-mplus-bold',
    fontSize: 24,
    color: '#4CAF50',
    marginBottom: 10,
  },
  starsContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
  },
  star: {
    fontSize: 30,
    marginHorizontal: 5,
  },
  overallMessage: {
    fontFamily: 'font-mplus',
    fontSize: 16,
    color: '#555',
    textAlign: 'center',
    marginTop: 10,
  },
  resultsContainer: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  resultItemWrapper: {
    marginBottom: 12,
  },
  resultItem: {
    borderRadius: 16,
    padding: 16,
    flexDirection: 'row',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  characterContainer: {
    width: 80,
    alignItems: 'center',
  },
  characterText: {
    fontFamily: 'font-mplus-bold',
    fontSize: 36,
    color: '#333',
    marginBottom: 5,
  },
  resultIcon: {
    marginTop: 5,
  },
  resultIconText: {
    fontSize: 24,
  },
  detailsContainer: {
    flex: 1,
    paddingLeft: 20,
  },
  messageText: {
    fontFamily: 'font-mplus-bold',
    fontSize: 18,
    marginBottom: 4,
  },
  timeText: {
    fontFamily: 'font-mplus',
    fontSize: 12,
    color: '#999',
  },
  nextButton: {
    marginHorizontal: 20,
    marginTop: 20,
    marginBottom: 30,
    borderRadius: 25,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 4,
  },
  nextButtonGradient: {
    padding: 18,
    alignItems: 'center',
  },
  nextButtonText: {
    color: '#FFF',
    fontFamily: 'font-mplus-bold',
    fontSize: 20,
  },
});